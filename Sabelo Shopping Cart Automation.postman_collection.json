{
	"info": {
		"_postman_id": "f208a5f0-cbde-4738-b1a7-b19e8672e45a",
		"name": "Shopping Cart Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 OK\", function () \r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Product Bananas\", () => {\r",
							"const response = pm.response.json();\r",
							"pm.expect(response).to.have.nested.property(\"[0].barCode\", \"75d7aa69-5447-4809-8409-115dbc507ebd\");\r",
							"pm.expect(response).to.have.nested.property(\"[0].name\", \"Bananas\");\r",
							"pm.expect(response).to.have.nested.property(\"[0].description\", \"Bag of Bananas\");\r",
							"pm.expect(response).to.have.nested.property(\"[0].category\", \"Fruit\");\r",
							"pm.expect(response).to.have.nested.property(\"[0].unitPrice\", 1995);\r",
							"});\r",
							"pm.test(\"Product Apples\", () => {\r",
							"const response = pm.response.json();\r",
							"pm.expect(response).to.have.nested.property(\"[1].barCode\", \"a9cff94d-b947-42ef-aa2e-cbee128387d5\");\r",
							"pm.expect(response).to.have.nested.property(\"[1].name\", \"Apples\");\r",
							"pm.expect(response).to.have.nested.property(\"[1].description\", \"Bag of Apples\");\r",
							"pm.expect(response).to.have.nested.property(\"[1].category\", \"Fruit\");\r",
							"pm.expect(response).to.have.nested.property(\"[1].unitPrice\", 2995);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/products",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"products"
					]
				},
				"description": "Returns a list of all products available\n\nShould return status 200"
			},
			"response": []
		},
		{
			"name": "Create new cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201 created\", function () \r",
							"{\r",
							"pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"New cartId created\", () => {\r",
							"var jsonData = pm.response.json();\r",
							"pm.globals.set(\"cartId1\", jsonData.cartId);    \r",
							"});\r",
							"\r",
							"pm.test(\"CartId matches environment variable\", function () {\r",
							"pm.expect(pm.response.json().name).to.equals(pm.globals.get(\"@cartId1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts"
					]
				},
				"description": "Generates a new cart id to associate items with\n\nShould return status 201\n\nShould return a Location header with a url to get the cart created by id"
			},
			"response": []
		},
		{
			"name": "Add item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201 created\", function () \r",
							"{\r",
							"pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"BarCode\": \"a9cff94d-b947-42ef-aa2e-cbee128387d5\",\n    \"Quantity\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items"
					]
				},
				"description": "Adds an item with a quantity to the cart\n\nShould return status 201, with a Location header set to the url to get the cart by id\n\nCould return status 404, with a message if the product barcode is not found in the available products (see Get all products\")\n\nCould return status 400, with a message if no product barcode is specified\n\nCould return status 400, with a message if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Add item to cart empty request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 Unsupported Media Type\", function () \r",
							"{\r",
							"pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Error Message \", () => {\r",
							"const response = pm.response.json();\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items"
					]
				},
				"description": "Adds an item with a quantity to the cart\n\nShould return status 201, with a Location header set to the url to get the cart by id\n\nCould return status 404, with a message if the product barcode is not found in the available products (see Get all products\")\n\nCould return status 400, with a message if no product barcode is specified\n\nCould return status 400, with a message if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Add item to cart invalid cartId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"BarCode\": \"021b598d-9b80-4c49-b66b-abf339177781\",\r\n    \"Quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts//items",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"",
						"items"
					]
				},
				"description": "Adds an item with a quantity to the cart\n\nShould return status 201, with a Location header set to the url to get the cart by id\n\nCould return status 404, with a message if the product barcode is not found in the available products (see Get all products\")\n\nCould return status 400, with a message if no product barcode is specified\n\nCould return status 400, with a message if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Add item to cart invalid barcode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 Bad Request\", function () \r",
							"{\r",
							"pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.eql(\"Barcode is required\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"BarCode\": \"\",\r\n    \"Quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items"
					]
				},
				"description": "Adds an item with a quantity to the cart\n\nShould return status 201, with a Location header set to the url to get the cart by id\n\nCould return status 404, with a message if the product barcode is not found in the available products (see Get all products\")\n\nCould return status 400, with a message if no product barcode is specified\n\nCould return status 400, with a message if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Add item to cart invalid quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 Bad Request\", function () \r",
							"{\r",
							"pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.eql(\"0 is an invalid value\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"BarCode\": \"a9cff94d-b947-42ef-aa2e-cbee128387d5\",\r\n    \"Quantity\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items"
					]
				},
				"description": "Adds an item with a quantity to the cart\n\nShould return status 201, with a Location header set to the url to get the cart by id\n\nCould return status 404, with a message if the product barcode is not found in the available products (see Get all products\")\n\nCould return status 400, with a message if no product barcode is specified\n\nCould return status 400, with a message if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Get all carts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 OK\", function () \r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.globals.get(\"@cartId1\", jsonData.cartId);\r",
							"pm.test(\"Get all cartId's\", () => {\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if(!pm.variables.has('counter')){\r",
							"    pm.variables.set('counter',0);\r",
							"}\r",
							"var counter = pm.variables.get('counter');\r",
							"\r",
							"if(pm.globals.has(\"cartId\" + counter)){\r",
							"    var cartIdValue = pm.globals.get(\"cartId\" + counter)\r",
							"    pm.variables.set(\"cartIdDynamic\",cartIdValue)\r",
							"}\r",
							"counter++;\r",
							"pm.variables.set('counter',counter);\r",
							"if(pm.globals.has(\"cartId\"+counter)){\r",
							"    postman.setNextRequest(\"POST Array Data\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts"
					]
				},
				"description": "Gets a list of all current cart ids"
			},
			"response": []
		},
		{
			"name": "Get cart by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 OK\", function () \r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get cart item\", () => {\r",
							"const response = pm.response.json();\r",
							"pm.expect(response).to.be.an(\"object\");\r",
							"pm.expect(pm.response.json().name).to.equals(pm.globals.get(\"@cartId1\"))\r",
							"pm.expect(response).to.have.nested.property(\"items[0].product.barCode\", \"a9cff94d-b947-42ef-aa2e-cbee128387d5\");\r",
							"pm.expect(response).to.have.nested.property(\"items[0].product.name\", \"Apples\");\r",
							"pm.expect(response).to.have.nested.property(\"items[0].product.description\", \"Bag of Apples\");\r",
							"pm.expect(response).to.have.nested.property(\"items[0].product.category\", \"Fruit\");\r",
							"pm.expect(response).to.have.nested.property(\"items[0].product.unitPrice\", 2995);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}"
					]
				},
				"description": "Return a full cart object with items in the cart currently\n\nShould return status 200 & the cart\n\nCould return status 404 if the cart id cannot be found"
			},
			"response": []
		},
		{
			"name": "Get cart by id invalid cartId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.contain(\"Cart not found\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts/{{$guid}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{$guid}}"
					]
				},
				"description": "Return a full cart object with items in the cart currently\n\nShould return status 200 & the cart\n\nCould return status 404 if the cart id cannot be found"
			},
			"response": []
		},
		{
			"name": "Update item in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 OK\", function () \r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Quantity\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items/a9cff94d-b947-42ef-aa2e-cbee128387d5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items",
						"a9cff94d-b947-42ef-aa2e-cbee128387d5"
					]
				},
				"description": "Update an items quantity in a cart identified by the cart id. The item is identified by the Barcode id of the product that should exist in the cart\n\nShould return status 200\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart\n\nCould return status 400 if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Update item in cart invalid barcode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Quantity\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items//",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items",
						"",
						""
					]
				},
				"description": "Update an items quantity in a cart identified by the cart id. The item is identified by the Barcode id of the product that should exist in the cart\n\nShould return status 200\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart\n\nCould return status 400 if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Update item in cart invalid Cart and exicting barcode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.contains(\"Cart not found for\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Quantity\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7195/api/carts/{{$guid}}/items/a9cff94d-b947-42ef-aa2e-cbee128387d5/",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{$guid}}",
						"items",
						"a9cff94d-b947-42ef-aa2e-cbee128387d5",
						""
					]
				},
				"description": "Update an items quantity in a cart identified by the cart id. The item is identified by the Barcode id of the product that should exist in the cart\n\nShould return status 200\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart\n\nCould return status 400 if the quantity is less than or equal to 0"
			},
			"response": []
		},
		{
			"name": "Delete item from cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204 No Content\", function () \r",
							"{\r",
							"pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items/a9cff94d-b947-42ef-aa2e-cbee128387d5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items",
						"a9cff94d-b947-42ef-aa2e-cbee128387d5"
					]
				},
				"description": "Remove an item from the cart based on the cart id & the barcode id of the product\n\nShould return status 204 when successfully removing an item from the cart\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart"
			},
			"response": []
		},
		{
			"name": "Delete item from cart invaild cartId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.contain(\"Item\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items/a9cff94d-b947-42ef-aa2e-cbee128387d5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items",
						"a9cff94d-b947-42ef-aa2e-cbee128387d5"
					]
				},
				"description": "Remove an item from the cart based on the cart id & the barcode id of the product\n\nShould return status 204 when successfully removing an item from the cart\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart"
			},
			"response": []
		},
		{
			"name": "Delete item from cart invaild barcode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 Not Found\", function () \r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Has Error Message \", () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson.message).to.contain(\"Item\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7195/api/carts/{{cartId1}}/items/20cff94d-b947-42ef-aa2e-cbee128387d5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7195",
					"path": [
						"api",
						"carts",
						"{{cartId1}}",
						"items",
						"20cff94d-b947-42ef-aa2e-cbee128387d5"
					]
				},
				"description": "Remove an item from the cart based on the cart id & the barcode id of the product\n\nShould return status 204 when successfully removing an item from the cart\n\nCould return status 404, with a message if the cart cannot be found for the id specified\n\nCould return status 404, with a message if the cart is found, but no product barcode is found in the cart"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}